name: CI (Linux & macOS)

on:
  push:
    branches:
      - 'main'
      - 'GH[1-9]+[0-9]*-*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu-18.04, ubuntu-20.04, macos-latest]
        compiler: [g++-7, g++-8, g++-9, g++-10, clang++-8, clang++-9, clang++-10, clang++-11, g++]
        exclude:
          # see 'Ultimate mega master compatibility table'
          # https://askubuntu.com/questions/466651/how-do-i-use-the-latest-gcc-on-ubuntu/1163021#1163021

          # Newer compilers don't run on ubuntu 18.04
          - runs-on: ubuntu-18.04
            compiler: g++
          - runs-on: ubuntu-18.04
            compiler: g++-9
          - runs-on: ubuntu-18.04
            compiler: g++-10
          - runs-on: ubuntu-18.04
            compiler: clang++-10
          - runs-on: ubuntu-18.04
            compiler: clang++-11
          # Older compilers don't run on ubuntu 20.04
          - runs-on: ubuntu-20.04
            compiler: g++
          - runs-on: ubuntu-20.04
            compiler: g++-4.8
          - runs-on: ubuntu-20.04
            compiler: g++-4.9
          - runs-on: ubuntu-20.04
            compiler: g++-5
          - runs-on: ubuntu-20.04
            compiler: g++-6
          # Versioned g++ and clang++ don't run on macOS
          - runs-on: macos-latest
            compiler: g++-4.8
          - runs-on: macos-latest
            compiler: g++-4.9
          - runs-on: macos-latest
            compiler: g++-5
          - runs-on: macos-latest
            compiler: g++-6
          - runs-on: macos-latest
            compiler: g++-7
          - runs-on: macos-latest
            compiler: g++-8
          - runs-on: macos-latest
            compiler: g++-9
          - runs-on: macos-latest
            compiler: g++-10
          - runs-on: macos-latest
            compiler: clang++-8
          - runs-on: macos-latest
            compiler: clang++-9
          - runs-on: macos-latest
            compiler: clang++-10
          - runs-on: macos-latest
            compiler: clang++-11
    runs-on: ${{ matrix.runs-on }}
    env:
      CXX: ${{ matrix.compiler }}
      CXX_FLAGS: -Wall -Werror -march=native -mno-avx512f ${{ startsWith(matrix.runs-on, 'macos') && '-Wno-unused-command-line-argument' || '' }}
    steps:
    - uses: actions/checkout@v2
    - name: Install CMake on Linux
      if: startsWith(matrix.runs-on, 'ubuntu')
      run: sudo apt-get install -y cmake
    - name: Identify CMake
      run: cmake --version
    - name: Install compiler
      if: startsWith(matrix.runs-on, 'ubuntu')
      run: sudo apt-get install -y ${CXX}
    - name: Identify compiler
      run: |
        ${CXX} --version
        ${CXX} -march=native -E -v - </dev/null 2>&1 | grep cc1
    - name: Install OpenMP on MacOS
      if: startsWith(matrix.runs-on, 'macos')
      run: brew install libomp
    - name: Configure
      working-directory: .build
      run: |
        cmake -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_BUILD_TYPE=Release -DBENCHMARK_ENABLE_GTEST_TESTS=OFF -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" ..
    - name: Build
      working-directory: .build
      run: |
        cmake --build .
    - name: Test
      working-directory: .build/lib
      run: ctest
    - name: Install
      working-directory: .build
      run: sudo make install
